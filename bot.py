import os
import json
import requests
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import ApplicationBuilder, Application

# –•–µ–Ω–¥–ª–µ—Ä—ã
from handlers.start import handler as start_handler
from handlers.assistant import handler as assistant_handler
from handlers.semantics import handler as semantics_handler
from handlers.serp import handler as serp_handler

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# –§–æ—Ä–º–∏—Ä—É–µ–º Webhook URL
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FastAPI
app = FastAPI()

# –°–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
tg_app: Application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
tg_app.add_handler(start_handler)
tg_app.add_handler(assistant_handler)
tg_app.add_handler(semantics_handler)
tg_app.add_handler(serp_handler)

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî Telegram –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Webhook
@app.on_event("startup")
async def on_startup():
    print("üì¶ TELEGRAM_TOKEN:", TELEGRAM_TOKEN[:10] if TELEGRAM_TOKEN else "‚ùå None", "...")
    print("üåê RENDER_EXTERNAL_HOSTNAME:", RENDER_EXTERNAL_HOSTNAME or "‚ùå None")
    print("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook:", WEBHOOK_URL)

    await tg_app.initialize()
    await tg_app.start()
    await tg_app.bot.set_webhook(url=WEBHOOK_URL)


#  webhook
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    print("üß™ –í—Ö–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /webhook")
    try:
        update_data = await request.json()
        print("üì• –ü–æ–ª—É—á–µ–Ω JSON:", json.dumps(update_data, indent=2))

        update = Update.de_json(update_data, tg_app.bot)
        await tg_app.update_queue.put(update)

        return {"status": "ok"}
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:", str(e))
        return {"status": "error", "message": str(e)}


print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ Webhook")

from fastapi.responses import PlainTextResponse

@app.get("/cache", response_class=PlainTextResponse)
async def list_cache_files():
    try:
        files = os.listdir("serp_cache")
        return "\n".join(files) if files else "üì≠ –ü–∞–ø–∫–∞ serp_cache –ø—É—Å—Ç–∞."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {e}"

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn –¥–ª—è Render Web Service
if __name__ == "__main__":
    import uvicorn
    port = int(os.environ.get("PORT", 10000))
    print(f"üö™ –ó–∞–ø—É—Å–∫–∞—é Uvicorn –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    uvicorn.run("bot:app", host="0.0.0.0", port=port)
