import os
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from openai import OpenAI
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SERPAPI_KEY = os.getenv("SERPAPI_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø stea_verde_bot ü§ñ. –ù–∞–ø–∏—à–∏ /semantics <—Ç–µ–º–∞>, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —è–¥—Ä–æ."
    )

# –ö–æ–º–∞–Ω–¥–∞ /semantics <–∑–∞–ø—Ä–æ—Å>
async def semantics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = ' '.join(context.args)
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É –ø–æ—Å–ª–µ /semantics.")
        return

    prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –ø–æ —Ç–µ–º–µ '{query}', —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –ø–æ –∏–Ω—Ç–µ–Ω—Ç—É (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ, –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ) –∏ –æ—Ñ–æ—Ä–º–∏ —Å–ø–∏—Å–∫–æ–º."

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        result = response.choices[0].message.content.strip()
        await update.message.reply_text(result)

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /serp <–∫–ª—é—á> [+N]
async def serp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    count = 5
    query_parts = []

    for arg in args:
        if arg.startswith('+') and arg[1:].isdigit():
            count += int(arg[1:])
        else:
            query_parts.append(arg)

    query = ' '.join(query_parts)

    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ /serp")
        return

    await update.message.reply_text(f"üîé –ò—â—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google –ø–æ: *{query}* ...", parse_mode="Markdown")

    params = {
        "engine": "google",
        "q": query,
        "hl": "ro",
        "gl": "ro",
        "api_key": SERPAPI_KEY
    }

    try:
        response = requests.get("https://serpapi.com/search", params=params)
        data = response.json()

        if "organic_results" not in data:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
            return

        results = data["organic_results"][:count]

        message = "üìÑ *–¢–æ–ø-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Google:*\n\n"
        for res in results:
            title = res.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            link = res.get("link", "")
            message += f"‚Ä¢ [{title}]({link})\n"

        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

# AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
async def assistant(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    prompt = (
        f"–¢—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ Telegram-–±–æ—Ç–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, SEO –∏ SERP. "
        f"–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —á—ë—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –í–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{user_text}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        result = response.choices[0].message.content.strip()
        await update.message.reply_text(result)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("semantics", semantics))
    app.add_handler(CommandHandler("serp", serp))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, assistant))

    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π webhook (–∏–Ω–∞—á–µ Telegram –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç)
    await app.bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
